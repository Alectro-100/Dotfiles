#!/usr/bin/env bash

IFS=$'\n'
RED="\033[38;2;244;10;10m"
GREEN="\033[38;2;80;250;100m"
WARN="\033[38;2;233;98;116m"
BROWN="\033[38;2;240;120;120m"
LIGHT_SKIN="\033[38;2;255;230;180m"
MUDDY="\033[38;2;195;158;151m"
GREY="\033[38;2;160;160;140m"
BLUE="\033[38;2;150;134;255m"
NC="\033[0m"

declare -a  mpv_flags=()
MUSIC_DIRECTORY="\${HOME}/Music"
MUSIC_DIR="$(eval echo ${MUSIC_DIRECTORY})"
QUIET=
SELECTED=()
CURRENTLY_PLAYING=()
LOOP=0
SHUFFLE=0

readonly MPV_SOCKET_DIR="/tmp/.MPV"
readonly SOCKET="mpv_socket-$RANDOM"
readonly MPV_SOCKET="${MPV_SOCKET_DIR}/$SOCKET"
readonly MPV_LOG="${MPV_SOCKET_DIR}/mpv_log.log"

# function cleanup() {
#     echo '{"text": "", "class": "inactive"}"' | socat - UNIX-CONNECT:${MPV_SOCKET}
# }

trap Exit SIGTERM SIGINT

function LOG() {
    local type_="$1"
    shift
    case "${type_}" in
        info)
            [[ -z "${QUIET}" ]] && echo -e "[${GREEN}*${NC}]: $@"
            ;;
        command_)
            [[ -z "${QUIET}" ]] && printf "[${GREEN}*${NC}]: "; printf "%b " "$@\n\b"
            ;;
        warn)
            echo -e "[${WARN}^${NC}]: $@"
            ;;
        error)
            echo -e "[${RED}!${NC}]: $@"
            ;;
    esac
}

function Exit() {
    [[ -n $LOGGER_PID ]] && kill $LOGGER_PID 2> /dev/null
    rm -f "${MPV_SOCKET}" "$MPV_LOG"
    rmdir ${MPV_SOCKET_DIR} &> /dev/null
    printf "\nExiting..."
    exit $1
}

function Usage() {
    printf "%b\n" \
        "" \
        " ${MUDDY}Usage:${NC} PlayMusic [OPTIONS]" \
        "" \
        " ${MUDDY}Options:${NC}" \
        "   -vid, --video           Enable video output (default: no)" \
        "   -vol=N, --volume=N      Set volume (default: 65)" \
        "   -q, --quiet             Suppress MPV output" \
        "   -s, --shuffle           Shuffle selected tracks (only with --loop)" \
        "" \
        " ${MUDDY}Behavior:${NC}" \
        "   ðŸ”¹ Uses ${BLUE}fzf${NC} to pick music from '${LIGHT_SKIN}${MUSIC_DIRECTORY}${NC}'" \
        "   ðŸ”¹ Supports all major audio formats" \
        "   ðŸ”¹ Applies optimized mpv flags (hardware decoding, mpris, hdr, etc.)" \
        "" \
        " ${MUDDY}Examples:${NC}" \
        "   PlayMusic                   # Launch, pick music, play (loop each)" \
        "   PlayMusic --shuffle         # Random shuffle" \
        "   PlayMusic --vol=45          # Set volume to 45" \
        "" \
        " ${BROWN}Note:${NC} Shuffle does nothing without multiple files & --loop." \
        ""
}

function IPC_() {
    local data="$1"
    shift
    local -a args=("$@")
    local -a arr=()

    for (( i=0; i < ${#args[@]}; i++ )); do
        arr+=("${args[$i]}")
        if (( i < ${#args[@]} - 1 )); then
            arr+=(', ')
        fi
    done
    if [[ -S "${MPV_SOCKET}" ]]; then
        echo "{ \"command\": [ ${arr[@]} ] }" | ncat -U "${MPV_SOCKET}" | jq ".$data"
    else
        Exit 1
    fi
}

function BackgroundStatusLogger() {
    while true; do
        if [[ -S "${MPV_SOCKET}" ]]; then
            title=$(IPC_ 'data' '"get_property"' '"media-title"') &> /dev/null
            pos=$(IPC_ 'data' '"get_property"' '"time-pos"' | awk '{printf "%d:%02d", int($1/60), int($1%60)}') &> /dev/null
            dur=$(IPC_ 'data' '"get_property"' '"duration"' | awk '{printf "%d:%02d", int($1/60), int($1%60)}') &> /dev/null
        fi
        printf "\r\033[2K[${BLUE}*${NC}]: Playing: %b%s%b | %s / %s" "${GREEN}" "${title%.*}" "${NC}" "$pos" "$dur"
        sleep 0.5
    done
}

function HandleIpcControl() {
    local current_track=
    local togglePlay=false
    while true; do
        IFS= read -rsn1 KEY
        case "${KEY}" in
            q|Q) IPC_ 'error' '"quit"' &> /dev/null ; Exit 0 ;;
            s) IPC_ 'error' '"cycle"' '"shuffle"' &> /dev/null ;;
            r) IPC_ 'error' '"cycle"' '"loop-playlist"' &> /dev/null ;;
            f) IPC_ 'error' '"cycle"' '"fullscreen"' &> /dev/null ;;
            l) IPC_ 'error' '"seek"' 5 &> /dev/null ;;
            j) IPC_ 'error' '"seek"' -5 &> /dev/null ;;
            L) IPC_ 'error' '"seek"' 20 &> /dev/null ;;
            J) IPC_ 'error' '"seek"' -20 &> /dev/null ;;
            +) IPC_ 'error' '"add"' '"volume"' 5 &> /dev/null ;;
            -) IPC_ 'error' '"add"' '"volume"' -5 &> /dev/null ;;
            n|N) IPC_ 'error' '"playlist-next"' &> /dev/null ;;
            p|P) IPC_ 'error' '"playlist-prev"' &> /dev/null ;;
            $'\x20'|k)
                [[ $togglePlay == false ]] && togglePlay=true || togglePlay=false
                IPC_ 'error' '"set_property"' '"pause"' $togglePlay &> /dev/null
                ;;
            $'') # Enter key
                LOG info "You pressed Enter"
                ;;
        esac
    done
}

function TurnMusicOn() {
    local -a files_joined=("$@")
    local -a quoted_files=()
    local f=""
    local track_num=0

    mkdir -p "${MPV_SOCKET_DIR}"

    if [[ $LOOP -eq 1 ]]; then
        LOG info "${BLUE}Tracks${NC}:"
        for (( i=0; i < ${#files_joined[@]}; i++)); do
            track_num=$((i+1))
            f="${files_joined[$i]}"
            CURRENTLY_PLAYING+=("$(basename "${MUSIC_DIRECTORY}/${f}")")
            LOG info "  ${GREY}$track_num${NC} ${LIGHT_SKIN}${CURRENTLY_PLAYING[$i]%.*}${NC}"
        done
        for f in "${files_joined[@]}"; do
            quoted_files+=("\"${LIGHT_SKIN}${MUSIC_DIRECTORY}/${f}${NC}\"")
        done
        LOG command_ "${GREY}COMMAND${NC}: ${BROWN}mpv${NC}" "${mpv_flags[@]}" "${quoted_files[@]}"
        mpv "${mpv_flags[@]}" "${files_joined[@]/#/${MUSIC_DIR}/}" &> "${MPV_SOCKET_DIR}/mpv_log.log" & disown
        BackgroundStatusLogger &
        LOGGER_PID=$!
        HandleIpcControl
    else
        for f in "${files_joined[@]}"; do
            CURRENTLY_PLAYING="$(basename "${MUSIC_DIRECTORY}/${f}")"
            LOG info "${GREY}MUSIC${NC}: ${GREEN}${CURRENTLY_PLAYING%.*}${NC}"
            LOG command_ "${GREY}COMMAND${NC}: ${BROWN}mpv${NC} ${mpv_flags[@]} \"${LIGHT_SKIN}${MUSIC_DIRECTORY}/${f}${NC}\"\n"
            # echo "{\"text\": \"ðŸŽµ ${CURRENTLY_PLAYING%.*}\", \"class\":\"active\"}" | socat - UNIX-CONNECT:${MPV_SOCKET}
            mpv ${mpv_flags[@]} "${MUSIC_DIR}/${f}"
        done
    fi
}

function Play() {
    local MUSIC_FILES=()
    for file in "${SELECTED[@]}"; do
        if [[ -f "${MUSIC_DIR}/${file}" ]]; then
            MUSIC_FILES+=("${file}")
        else
            LOG error "No such Music file: '${LIGHT_SKIN}${file}${NC}'"
        fi
    done

    TurnMusicOn "${MUSIC_FILES[@]}"
}

function main() {
    local -a ARG_ARR=("$@")
    local arg=
    local volume=
    local video=

    for (( i=0 ; i < ${#ARG_ARR[@]} ; i++ )); do
        arg="${ARG_ARR[$i]}"
        case "${arg}" in
            vid|-vid|--vid|-video|--video)
                video="auto"
                ;;
            vol|-vol|--vol|-volume|--volume)
                volume=${ARG_ARR[ $((i+1)) ]}
                [[ -z ${volume} || ${volume} == -* ]] && {
                    LOG error "No argument give after ${GREY}--volume${NC}"
                    LOG info "Default volume: ${BLUE}65${NC}"
                    volume=65
                }
                i=$((i+1))
                ;;
            -vol=*|--vol=*|--volume=*)
                if [[ "${arg#*=}" =~ ^[0-9]+$ ]]; then
                    volume=$(awk -F'=' '{print $2}' <<< "${arg}")
                else
                    LOG error "Invalid volume: ${arg}"
                    LOG info "Default volume: ${BLUE}65${NC}"
                fi
                ;;
            -q|--quiet)
                QUIET="--really-quiet"
                ;;
            -s|--shuff|--shuffle)
                SHUFFLE=1
                ;;
            -h|--help)
                Usage
                Exit 0
                ;;
        esac
    done

    [[ -d "${MUSIC_DIR}" ]] || {
        LOG error "Music directory not found: '${BLUE}${MUSIC_DIR}${NC}'"
        Exit 1
    }

    mapfile -t SELECTED < <(find "${MUSIC_DIR}" \( -type f -iregex '.*\.\(mp3\|flac\|m4a\|wav\|aac\|ogg\|opus\|wma\|alac\|ape\|mpc\|wavpack\)' \) -printf "%P\n" | fzf --multi)


    if [[ ${#SELECTED[@]} -eq 0 ]]; then
        LOG info "No song selected"
        Exit 1
    elif [[ ${#SELECTED[@]} -gt 1 ]]; then
        LOOP=1
    fi

    [[ $SHUFFLE -eq 1 && $LOOP -eq 0 ]] && LOG warn "Shuffle can only be used with mutiple tracks"
    [[ $SHUFFLE -eq 1 ]] && SELECTED=($(printf "%s\n" "${SELECTED[@]}" | shuf))

    mpv_flags+=(
        "--vid=${video:-"no"}"
        "--volume=${volume:-65}"
    )

    mpv_flags+=(
        "--osc=no"
        "--script-opts=mpris=yes"
        "--vo=gpu-next"
        "--hwdec=vulkan"
        "--hdr-compute-peak"
        "--msg-level=ffmpeg/demuxer=error"
    )

    if [[ $LOOP -eq 1 ]]; then
        mpv_flags+=(
            "--loop-playlist=inf"
            "--input-ipc-server=${MPV_SOCKET}"
        )
    else
        mpv_flags+=("--loop-file=inf")
    fi

    [[ -n "${QUIET}" ]] && mpv_flags+=("${QUIET}")

    ### Play music
    Play
}

main "$@"
Exit 0

