#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

# Your git local dotfile repository
GIT_DIR="${HOME}/DEV/Dotfiles"

# Github username and dotfile repository
USERNAME="Alectro-100"
REPO_NAME="Dotfiles"

### File to file Copy
declare -A FILES_TO_COPY=(
    ["/etc/vimrc"]="${GIT_DIR}/vim/vimrc"
    ["/etc/xdg/nvim/init.vim"]="${GIT_DIR}/neovim/init.vim"
    ["${HOME}/.shell_rc"]="${GIT_DIR}/shell/SHELL_RC"
    ["${HOME}/.bashrc"]="${GIT_DIR}/shell/bashrc"
    ["${HOME}/.config/foot/foot.ini"]="${GIT_DIR}/foot/foot.ini"
    ["${HOME}/.config/alacritty/alacritty.toml"]="${GIT_DIR}/alacritty/alacritty.toml"
)

### Directory to Directory Copy
declare -A DIRS_TO_COPY=(
    ["${HOME}/.config/hypr"]="${GIT_DIR}/hyprland"
    ["${HOME}/.config/sway"]="${GIT_DIR}/sway"
    ["${HOME}/.config/i3"]="${GIT_DIR}/i3"
    ["${HOME}/.config/waybar"]="${GIT_DIR}/waybar"
    ["${HOME}/.config/wofi"]="${GIT_DIR}/wofi"
    ["${HOME}/.config/qutebrowser"]="${GIT_DIR}/qutebrowser"
    ["${HOME}/.bin"]="${GIT_DIR}/scripts"
)

# ASCII colors
GREEN="\033[38;2;100;255;40m"
YELLOW="\033[38;2;255;190;65m"
BLUE="\033[38;2;100;100;240m"
RED="\033[38;2;255;10;10m"
NC="\033[0m"
HL="\033[1m"

# command in use to copy stuff
SYNC_="rsync"

# LOG=0 ERROR=1 INFO=2 DEBUG=3
LOG_LEVEL=1

# Temporary variable
MSG=""

function ERROR() {
    [[ $LOG_LEVEL -ge 1 ]] && {
        echo -e "[${HL}${RED}ERROR${NC}]: $@"
    } || {
        return 0
    }
}

function INFO() {
    [[ $LOG_LEVEL -ge 2 ]] && {
        echo -e "[${HL}${GREEN}INFO${NC}]: $@"
    } || {
        return 0
    }
}

function DEBUG_LOG() {
    [[ $LOG_LEVEL -ge 3 ]] && {
        echo -e "[${HL}${YELLOW}DEBUG_LOG${NC}]: $@"
    } || {
        return 0
    }
}

function CopyFiles() {
    local SOURCE="$1"
    local DEST="$2"

    if [[ ! -f "${SOURCE}" ]]; then
        ERROR "Source '${BLUE}${SOURCE}${NC}' file does not exist"
        return 1
    fi

    mkdir --parents -- $(dirname "${DEST}")

    if [[ $LOG_LEVEL -ge 2 ]]; then
        if [[ "$SYNC_" == "rsync" ]]; then
            $SYNC_ --progress --archive "${SOURCE}" "${DEST}" || ERROR "Copy failed"
            INFO "Copied '${GREEN}${SOURCE}${NC}' ${RED}--->${NC} '${BLUE}${DEST}${NC}'"
        else
            $SYNC_ --verbose "${SOURCE}" "${DEST}" || ERROR "Copy failed"
            INFO "Copied '${GREEN}${SOURCE}${NC}' ${RED}--->${NC} '${BLUE}${DEST}${NC}'"
        fi
    else
        if [[ "$SYNC_" == "rsync" ]]; then
            $SYNC_ --archive "${SOURCE}" "${DEST}" 1> /dev/null 2>&1 || ERROR "Copy failed"
            INFO "Copied '${GREEN}${SOURCE}${NC}' ${RED}--->${NC} '${BLUE}${DEST}${NC}'"
        else
            $SYNC_ "${SOURCE}" "${DEST}" 1> /dev/null 2>&1 || ERROR "Copy failed"
            INFO "Copied '${GREEN}${SOURCE}${NC}' ${RED}--->${NC} '${BLUE}${DEST}${NC}'"
        fi
    fi
}

function CopyDirs() {
    local SOURCE="$1"
    local DEST="$2"

    if [[ ! -d "${SOURCE}" ]]; then
        ERROR "Source '${BLUE}${SOURCE}${NC}' directory does not exist"
        return 1
    fi

    mkdir --parents -- "${DEST}"

    if [[ $LOG_LEVEL -ge 2 ]]; then
        if [[ "$SYNC_" == "rsync" ]]; then
            $SYNC_ --progress --archive "${SOURCE}/" "${DEST}/" || ERROR "Copy failed"
            INFO "Copied '${GREEN}${SOURCE}${NC}/*' ${RED}--->${NC} '${BLUE}${DEST}${NC}'"
        else
            $SYNC_ --verbose --recursive "${SOURCE}"/* "${DEST}" || ERROR "Copy failed"
            INFO "Copied '${GREEN}${SOURCE}${NC}/*' ${RED}--->${NC} '${BLUE}${DEST}${NC}'"
        fi
    else
        if [[ "$SYNC_" == "rsync" ]]; then
            $SYNC_ --archive "${SOURCE}/" "${DEST}/" 1> /dev/null 2>&1 || ERROR "Copy failed"
            INFO "Copied '${GREEN}${SOURCE}${NC}/*' ${RED}--->${NC} '${BLUE}${DEST}${NC}'"
        else
            $SYNC_ --recursive "${SOURCE}"/* "${DEST}" 1> /dev/null 2>&1 || ERROR "Copy failed"
            INFO "Copied '${GREEN}${SOURCE}${NC}/*' ${RED}--->${NC} '${BLUE}${DEST}${NC}'"
        fi
    fi
}

function CloneRepo() {
    local DIR="$1"

    [[ -z "${USERNAME}" && -z "${REPO_NAME}" ]] && {
        ERROR "No github username or repo name is given"
        exit 1
    }

    if [[ -z "${DIR}" ]]; then
        INFO "No directory given. Using your current directory to clone"
        DIR="$(realpath .)/${REPO_NAME}"
    else
        DIR="$(realpath $1)/${REPO_NAME}"
    fi

    DEBUG_LOG "Getting dotfile repo from github"
    INFO "Cloning your repository at: $DIR"
    git clone "https://github.com/${USERNAME}/${REPO_NAME}.git" "${DIR}" && \
        INFO "Repository clone at '${BLUE}${DIR}${NC}'"
}

function PushRepo() {
    local force="$1"
    local satisfied=""
    local should_continue=""
    local should_commit=""

    [[ -z "${USERNAME}" ]] && {
        ERROR "No github username given"
    }
    [[ -z "${REPO_NAME}" ]] && {
        ERROR "No github repository name given"
    }

    cd "${GIT_DIR}"

    if ! git diff --quiet ; then
        INFO "Launching git interactive git add"
        git add -p || {
            ERROR "Interactive staging failed"
            return 1
        }
    fi
    INFO "Summary of staged changes"
    git diff --staged --stat

    printf "%s: " "Are you saisfied with changes? (y|n)"; read -r satisfied

    if [[ "${satisfied}" =~ ^(y|yes|Yes)$ ]]; then
        printf "%s: " "Commit? (y|n)"; read -r should_commit
        [[ "${should_commit}" =~ ^(y|yes|Yes)$ ]] || return 1
        git commit --template=<( printf "[tag] module: what changed\n\n" ) && \
            INFO "Successfully commited the changes"
    else
        INFO "Commit aborted"
        printf "%s: " "Continue to commit?"; read -r should_continue
        [[ "${should_continue}" =~ ^(y|yes|Yes)$ ]] || exit 1
    fi
    INFO "Pushing changes to git@github.com:${USERNAME}/${REPO_NAME}.git"
    git push "git@github.com:${USERNAME}/${REPO_NAME}.git" $(git symbolic-ref --short HEAD) ${force} && \
        INFO "Successfully pushed your changes to github repository"
}

function Cleanup() {
    ERROR "${RED}Sync interrupted. Clean up manually.${NC}" && exit 1
}

function Usage() {
    printf "%b\n" \
    "${HL}Backup - Your Dotfiles Backup and Sync Script${NC}" \
    "" \
    "Usage:" \
    "  BackUp [options]" \
    ""  \
    "Options:" \
    "  -h, --help            Show this help message and exit" \
    "  -v, --verbose         Set verbose output (LOG_LEVEL=1)" \
    "  -l=N, --log=N         Set log level (0=none, 1=error, 2=info, 3=debug)" \
    "  -d, --debug           Enable debug level logging (LOG_LEVEL=3)" \
    "  -g, --git-status      Show git status of your dotfile repo after backup" \
    "  -c DIR, --clone DIR   Clone your dotfile repo to specified DIR (local path)" \
    "  -m MSG, --msg MSG     Commit message for git push" \
    "  -p, --push            Push changes to your remote GitHub repository" \
    "  --force               Force git push with --force flag" \
    ""  \
    "Description:" \
    "  This script copies your important config files and directories into a" \
    "  local git repository (${BLUE}${GIT_DIR}${NC}) for backup and version control." \
    "  You can optionally clone your dotfiles repo, push changes, and see git status." \
    "" \
    "GitHub repo info:" \
    "  Username: ${BLUE}${USERNAME}${NC}" \
    "  Repository: ${BLUE}${REPO_NAME}${NC}"
}

trap Cleanup SIGINT SIGTERM

function main() {
    # An array to hold all the given flags
    local -a flagArr=("$@")

    # 1 for git status 0 for no git status
    local git_status=0

    # Toggle push or pull
    local should_push=0
    local should_clone=0
    # Clone directory
    local clone_dir=""

    # string '--force'
    local force=""

    for (( i=0 ; i < ${#flagArr[@]} ; i++ )); do
        arg="${flagArr[$i]}"
        if [[ "${arg}" == -* ]]; then
            case "${arg}" in
                -v|--verbose|--progress)
                    LOG_LEVEL=1
                    DEBUG_LOG "Verbose is set"
                    ;;
                -l=*|--log=*|--loglevel=*)
                    LOG_LEVEL=${arg#*=}
                    if [[ -z ${LOG_LEVEL} || ${LOG_LEVEL} == -* ]] || [[ ! ${LOG_LEVEL} =~ ^[0-9]+$ ]]; then
                        LOG_LEVEL=1
                    elif [[ $LOG_LEVEL -gt 3 ]]; then
                        DEBUG_LOG "LOG_LEVEL has no effect over integer ${LOG_LEVEL}"
                    fi
                    [[ $LOG_LEVEL -ge 3 ]] && DEBUG_LOG "Debugging enabled"
                    ;;
                -l|--log|--loglevel)
                    LOG_LEVEL=${flagArr[$(( i + 1 ))]:-1}

                    if [[ -z ${LOG_LEVEL} || ${LOG_LEVEL} == -* ]]; then
                        LOG_LEVEL=1
                    elif [[ $LOG_LEVEL -gt 3 ]]; then
                        DEBUG_LOG "LOG_LEVEL has no effect over integer ${LOG_LEVEL}"
                    fi
                    [[ $LOG_LEVEL -ge 3 ]] && DEBUG_LOG "Debugging enabled"
                    i=$(( i + 1 ))
                    ;;
                -d|-db|--db|--deb|--debug)
                    LOG_LEVEL=2
                    DEBUG_LOG "Debugging enabled"
                    ;;
                -g|-gs|--gs|--status|--git-status)
                    git_status=1
                    DEBUG_LOG "git_status is set"
                    ;;
                -c|--clone|--clone-local)
                    clone_dir="${flagArr[$(( i + 1 ))]}"
                    [[ -n "${clone_dir}" ]] && {
                        i=$(( i + 1 ))
                    }
                    should_clone=1
                    ;;
                -clone=*|--clone-local=*)
                    clone_dir="${arg#*=}"
                    should_clone=1
                    ;;
                -m|-msg|--msg)
                    MSG="${flagArr[$(( i + 1 ))]}"
                    [[ -n "${MSG}" ]] && {
                        i=$(( i + 1 ))
                    }
                    should_clone=1
                    ;;
                -p|--push)
                    should_push=1
                    LOG_LEVEL=2
                    DEBUG_LOG "Backup will be pushed to github"
                    ;;
                --force)
                    force="--force"
                    DEBUG_LOG "Forcing push"
                    ;;
                -h|--help|help)
                    Usage
                    exit 0
                    ;;
                *)
                    ERROR "Invalid flag: $arg"
                    ;;
            esac
        fi
    done


    if [[ "${should_clone}" -eq 1 ]]; then
        CloneRepo "${clone_dir}"
        exit 0
    fi

    if command -v rsync 1> /dev/null 2>&1; then
        SYNC_="rsync"
        [[ $? -ne 0 ]] && ERROR "'rsync' not found. Falling back to 'cp'."
    elif command -v cp 1> /dev/null 2>&1; then
        SYNC_="cp"
    fi

    # Why local dotfile directory doesn't exist
    if [[ ! -d "${GIT_DIR}" ]]; then
        INFO "${GIT_DIR} doesn't exist"
        mkdir --parents "${GIT_DIR}" && {
            INFO "Created ${GIT_DIR}"
        } || {
            ERROR "Cannot create '${BLUE}${GIT_DIR}${NC}'"
            exit 1
        }
    fi

    DEBUG_LOG "Using GIT_DIR=$GIT_DIR"
    DEBUG_LOG "Using git_status=$git_status"
    DEBUG_LOG "Using LOG_LEVEL=$LOG_LEVEL"
    DEBUG_LOG "Using SYNC_=$SYNC_"

    # Start copying all the files to the destination
    for src in "${!FILES_TO_COPY[@]}"; do
        CopyFiles "${src}" "${FILES_TO_COPY[$src]}"
    done

    # Start copying directory content to the the destination
    for src in "${!DIRS_TO_COPY[@]}"; do
        CopyDirs "${src}" "${DIRS_TO_COPY[$src]}"
    done

    if [[ ${git_status} -eq 1 ]]; then
        cd ${GIT_DIR}
        git status
    fi

    echo && INFO "Dotfile directory: ${BLUE}${GIT_DIR}${NC}\n"

    [[ $should_push -eq 1 ]] && {
        PushRepo "${force}"
    }
}

main "$@"

